#!/bin/sh

# Copyright (C) 2015-2020, Wazuh Inc.
# March 6, 2019.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

# Load ossec-init variables
. /etc/ossec-init.conf

# Global variables
CONF_FILE="${DIRECTORY}/etc/ossec.conf"
TMP_ENROLLMENT="${DIRECTORY}/tmp/autoenrollment.conf"

# Set default sed alias
sed="sed -ri"
# By default, use gnu sed (gsed).
use_unix_sed="False"

# Special function to use generic sed
unix_sed() {
    sed_expression="$1"
    target_file="$2"

    sed "${sed_expression}" "${target_file}" > "${target_file}.tmp"
    cat "${target_file}.tmp" > "${target_file}"
    rm "${target_file}.tmp"
}

# Update the value of a XML tag inside the ossec.conf
edit_value_tag() {

    file=""

    if [ -z "$3" ]; then
        file="${CONF_FILE}"
    else
        file="${TMP_ENROLLMENT}"
    fi

    if [ ! -z "$1" ] && [ ! -z "$2" ]; then
        if [ "${use_unix_sed}" = "False" ] ; then
            ${sed} "s#<$1>.*</$1>#<$1>$2</$1>#g" "${file}"
        else
            unix_sed "s#<$1>.*</$1>#<$1>$2</$1>#g" "${file}"
        fi
    fi

    # Delete the configuration tag if its value is empty
    # This will allow using the default value
    if [ "${file}" = "${TMP_ENROLLMENT}" ] && [ -z "$2" ]; then
        if [ "${use_unix_sed}" = "False" ] ; then
            ${sed} "s#<$1>.*</$1>##g" "${file}"
        else
            unix_sed "s#<$1>.*</$1>##g" "${file}"
        fi
    fi
}

# Change address block of the ossec.conf
add_adress_block() {
    # Getting function parameters on new variable
    SET_ADDRESSES="$@"

    # Remove the server configuration
    if [ "${use_unix_sed}" = "False" ] ; then
        ${sed} "/<server>/,/\/server>/d" ${CONF_FILE}
    else
        unix_sed "/<server>/,/\/server>/d" "${CONF_FILE}"
    fi

    # Get the client configuration generated by gen_ossec.sh
    start_config="$(grep -n "<client>" ${CONF_FILE} | cut -d':' -f 1)"
    end_config="$(grep -n "</client>" ${CONF_FILE} | cut -d':' -f 1)"
    start_config=$(( start_config + 1 ))
    end_config=$(( end_config - 1 ))
    client_config="$(sed -n "${start_config},${end_config}p" ${CONF_FILE})"

    # Remove the client configuration
    if [ "${use_unix_sed}" = "False" ] ; then
        ${sed} "/<client>/,/\/client>/d" ${CONF_FILE}
    else
        unix_sed "/<client>/,/\/client>/d" "${CONF_FILE}"
    fi

    # Write the client configuration block
    echo "<ossec_config>" >> ${CONF_FILE}
    echo "  <client>" >> ${CONF_FILE}
    for i in ${SET_ADDRESSES};
    do
        echo "    <server>" >> ${CONF_FILE}
        echo "      <address>$i</address>" >> ${CONF_FILE}
        echo "      <port>1514</port>" >> ${CONF_FILE}
        echo "      <protocol>udp</protocol>" >> ${CONF_FILE}
        echo "    </server>" >> ${CONF_FILE}
    done

    echo "${client_config}" >> ${CONF_FILE}
    echo "  </client>" >> ${CONF_FILE}
    echo "</ossec_config>" >> ${CONF_FILE}
}

# Set all defined variables from environment
set_vars () {
    export WAZUH_MANAGER=$(launchctl getenv WAZUH_MANAGER)
    export WAZUH_MANAGER_PORT=$(launchctl getenv WAZUH_MANAGER_PORT)
    export WAZUH_PROTOCOL=$(launchctl getenv WAZUH_PROTOCOL)
    export WAZUH_REGISTRATION_SERVER=$(launchctl getenv WAZUH_REGISTRATION_SERVER)
    export WAZUH_REGISTRATION_PORT=$(launchctl getenv WAZUH_REGISTRATION_PORT)
    export WAZUH_REGISTRATION_PASSWORD=$(launchctl getenv WAZUH_REGISTRATION_PASSWORD)
    export WAZUH_KEEP_ALIVE_INTERVAL=$(launchctl getenv WAZUH_KEEP_ALIVE_INTERVAL)
    export WAZUH_TIME_RECONNECT=$(launchctl getenv WAZUH_TIME_RECONNECT)
    export WAZUH_REGISTRATION_CA=$(launchctl getenv WAZUH_REGISTRATION_CA)
    export WAZUH_REGISTRATION_CERTIFICATE=$(launchctl getenv WAZUH_REGISTRATION_CERTIFICATE)
    export WAZUH_REGISTRATION_KEY=$(launchctl getenv WAZUH_REGISTRATION_KEY)
    export WAZUH_AGENT_NAME=$(launchctl getenv WAZUH_AGENT_NAME)
    export WAZUH_AGENT_GROUP=$(launchctl getenv WAZUH_AGENT_GROUP)
}

# Remove all defined variables from environment
unset_vars() {

    OS=$1
    # String of variables that we could use
    vars="WAZUH_PROTOCOL WAZUH_MANAGER_PORT WAZUH_TIME_RECONNECT \
          WAZUH_AGENT_NAME  WAZUH_MANAGER WAZUH_REGISTRATION_SERVER WAZUH_REGISTRATION_PORT \
          WAZUH_REGISTRATION_PASSWORD WAZUH_KEEP_ALIVE_INTERVAL WAZUH_REGISTRATION_CA \
          WAZUH_REGISTRATION_CERTIFICATE WAZUH_REGISTRATION_KEY WAZUH_AGENT_GROUP"

    for var in ${vars}; do
        if [ "${OS}" = "Darwin" ]; then
            launchctl unsetenv ${var}
        fi
        unset ${var}
    done
}

# Function to convert strings to lower version
tolower () {
   echo $1 | tr '[:upper:]' '[:lower:]'
}


# Add auto-enrollment configuration block
add_auto_enrollment () {
    # Write the client configuration block
    echo "<ossec_config>" >> "${TMP_ENROLLMENT}"
    echo "  <client>" >> "${TMP_ENROLLMENT}"
    echo "    <auto_enrollment>" >> "${TMP_ENROLLMENT}"
    echo "      <enabled>yes</enabled>" >> "${TMP_ENROLLMENT}"
    echo "      <manager_address>address</manager_address>" >> "${TMP_ENROLLMENT}"
    echo "      <port>1515</port>" >> "${TMP_ENROLLMENT}"
    echo "      <agent_name>agent</agent_name>" >> "${TMP_ENROLLMENT}"
    echo "      <groups>Group1</groups>" >> "${TMP_ENROLLMENT}"
    echo "      <agent_address>agent_address</agent_address>" >> "${TMP_ENROLLMENT}"
    echo "      <ssl_cipher>HIGH:!ADH:!EXP:!MD5:!RC4:!3DES:!CAMELLIA:@STRENGTH</ssl_cipher>" >> "${TMP_ENROLLMENT}"
    echo "      <server_ca_path>/path/to/server_ca</server_ca_path>" >> "${TMP_ENROLLMENT}"
    echo "      <agent_certificate_path>/path/to/agent.cert</agent_certificate_path>" >> "${TMP_ENROLLMENT}"
    echo "      <agent_key_path>/path/to/agent.key</agent_key_path>" >> "${TMP_ENROLLMENT}"
    echo "      <authorization_pass>TopSecret</authorization_pass>" >> "${TMP_ENROLLMENT}"
    echo "      <auto_method>no</auto_method>" >> "${TMP_ENROLLMENT}"
    echo "      <delay_after_enrollment>20</delay_after_enrollment>" >> "${TMP_ENROLLMENT}"
    echo "      <use_source_ip>no</use_source_ip>" >> "${TMP_ENROLLMENT}"
    echo "    </auto_enrollment>" >> "${TMP_ENROLLMENT}"
    echo "  </client>" >> "${TMP_ENROLLMENT}"
    echo "</ossec_config>" >> "${TMP_ENROLLMENT}"
}

# Add the auto_enrollment block to the configuration file
concat_conf(){
    cat ${TMP_ENROLLMENT} >> ${CONF_FILE}
    rm -f ${TMP_ENROLLMENT}
}

# Main function the script begin here
main () {

    uname_s=$(uname -s)

    # Check what kind of system we are working with
    if [ "${uname_s}" = "Darwin" ]; then
        sed="sed -ire"
        set_vars
    elif [ "${uname_s}" = "AIX" ] || [ "${uname_s}" = "SunOS" ] || [ "${uname_s}" = "HP-UX" ]; then
        use_unix_sed="True"
    fi

    get_deprecated_vars

    if [ ! -z ${WAZUH_MANAGER} ]; then
        if [ ! -f ${DIRECTORY}/logs/ossec.log ]; then
            touch -f ${DIRECTORY}/logs/ossec.log
            chmod 660 ${DIRECTORY}/logs/ossec.log
            chown root:ossec ${DIRECTORY}/logs/ossec.log
        fi

        # Check if multiples IPs are defined in variable WAZUH_MANAGER
        WAZUH_MANAGER=$(echo ${WAZUH_MANAGER} | sed "s#,#;#g")
        ADDRESSES="$(echo ${WAZUH_MANAGER} | awk '{split($0,a,",")} END{ for (i in a) { print a[i] } }' |  tr '\n' ' ')"
        if echo ${ADDRESSES} | grep ' ' > /dev/null 2>&1 ; then
            # Get uniques values
            ADDRESSES=$(echo "${ADDRESSES}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
            add_adress_block "${ADDRESSES}"
        else
            # Single address
            edit_value_tag "address" ${WAZUH_MANAGER}
        fi

        # Options to be modified in ossec.conf
        edit_value_tag "protocol" "$(tolower ${WAZUH_PROTOCOL})"
        edit_value_tag "port" ${WAZUH_MANAGER_PORT}
        edit_value_tag "notify_time" ${WAZUH_KEEP_ALIVE_INTERVAL}
        edit_value_tag "time-reconnect" ${WAZUH_TIME_RECONNECT}

        add_auto_enrollment
        edit_value_tag "manager_address" ${WAZUH_REGISTRATION_SERVER} "auto_enrollment"
        edit_value_tag "port" ${WAZUH_REGISTRATION_PORT} "auto_enrollment"
        edit_value_tag "authorization_pass" ${WAZUH_REGISTRATION_PASSWORD} "auto_enrollment"
        edit_value_tag "server_ca_path" ${WAZUH_REGISTRATION_CA} "auto_enrollment"
        edit_value_tag "agent_certificate_path" ${WAZUH_REGISTRATION_CERTIFICATE} "auto_enrollment"
        edit_value_tag "agent_key_path" ${WAZUH_REGISTRATION_KEY} "auto_enrollment"
        edit_value_tag "agent_name" ${WAZUH_AGENT_NAME} "auto_enrollment"
        edit_value_tag "groups" ${WAZUH_AGENT_GROUP} "auto_enrollment"
        concat_conf
    fi

    unset_vars ${uname_s}
}

# Start script execution
main
